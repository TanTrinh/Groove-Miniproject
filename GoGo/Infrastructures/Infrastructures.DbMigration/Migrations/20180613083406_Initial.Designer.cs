// <auto-generated />
using System;
using Infrastructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructures.DbMigration.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180613083406_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domains.GoGo.Entities.DriverAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DriverId");

                    b.Property<int>("VehicleTypeId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("DriverAbility");
                });

            modelBuilder.Entity("Domains.GoGo.Entities.Fleet.FeatureOfVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("VehicleFeatureId");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleFeatureId");

                    b.HasIndex("VehicleId");

                    b.ToTable("FeatureOfVehicle");
                });

            modelBuilder.Entity("Domains.GoGo.Entities.Fleet.VehicleFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FeatureName");

                    b.HasKey("Id");

                    b.ToTable("VehicleFeature");
                });

            modelBuilder.Entity("Domains.GoGo.Entities.Fleet.VehicleFeatureRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RequestId");

                    b.Property<int?>("VehicleFeatureId");

                    b.Property<int>("VehileFeatureId");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("VehicleFeatureId");

                    b.ToTable("VehicleFeatureRequest");
                });

            modelBuilder.Entity("Domains.GoGo.Entities.ProblemMessage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Message");

                    b.Property<string>("ShipmentId");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId");

                    b.ToTable("ProblemMessage");
                });

            modelBuilder.Entity("Domains.GoGo.Entities.Request", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DeliveryAddress");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<long>("IssuerId");

                    b.Property<int>("PackageQuantity");

                    b.Property<DateTime>("PickingDate");

                    b.Property<string>("Status");

                    b.Property<string>("WareHouseId");

                    b.HasKey("Id");

                    b.HasIndex("IssuerId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("Domains.GoGo.Entities.Shipment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DriverId");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("RequestQuantity");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("Domains.GoGo.Entities.ShipmentRecord", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CoordinatorId");

                    b.Property<string>("Note");

                    b.Property<string>("ShipmentId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("ShipmentRecord");
                });

            modelBuilder.Entity("Domains.GoGo.Entities.ShipmentRequest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CustomerId");

                    b.Property<string>("Note");

                    b.Property<int>("ReQuestOrder");

                    b.Property<string>("RequestId");

                    b.Property<string>("ShipmentId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RequestId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("ShipmentRequest");
                });

            modelBuilder.Entity("Domains.GoGo.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Height");

                    b.Property<float>("Lenght");

                    b.Property<string>("LicensePlate");

                    b.Property<int>("VehicleTypeId");

                    b.Property<float>("width");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("Domains.GoGo.Entities.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.ToTable("VehicleType");
                });

            modelBuilder.Entity("Domains.GoGo.WareHouse", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<long>("OwnerId");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("WareHouse");
                });

            modelBuilder.Entity("Domains.Identity.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<long>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<long>("ModifiedByUserId");

                    b.Property<string>("ModifiedByUserName");

                    b.Property<DateTimeOffset>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<byte[]>("RowVersion");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Domains.Identity.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<long>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName")
                        .IsRequired();

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken();

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<long>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domains.GoGo.Entities.DriverAbility", b =>
                {
                    b.HasOne("Domains.Identity.Entities.User", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domains.GoGo.Entities.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domains.GoGo.Entities.Fleet.FeatureOfVehicle", b =>
                {
                    b.HasOne("Domains.GoGo.Entities.Fleet.VehicleFeature", "VehicleFeature")
                        .WithMany()
                        .HasForeignKey("VehicleFeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domains.GoGo.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domains.GoGo.Entities.Fleet.VehicleFeatureRequest", b =>
                {
                    b.HasOne("Domains.GoGo.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId");

                    b.HasOne("Domains.GoGo.Entities.Fleet.VehicleFeature", "VehicleFeature")
                        .WithMany()
                        .HasForeignKey("VehicleFeatureId");
                });

            modelBuilder.Entity("Domains.GoGo.Entities.ProblemMessage", b =>
                {
                    b.HasOne("Domains.GoGo.Entities.Shipment", "Shipment")
                        .WithMany()
                        .HasForeignKey("ShipmentId");
                });

            modelBuilder.Entity("Domains.GoGo.Entities.Request", b =>
                {
                    b.HasOne("Domains.Identity.Entities.User", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domains.GoGo.WareHouse", "WareHouse")
                        .WithMany()
                        .HasForeignKey("WareHouseId");
                });

            modelBuilder.Entity("Domains.GoGo.Entities.Shipment", b =>
                {
                    b.HasOne("Domains.Identity.Entities.User", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domains.GoGo.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domains.GoGo.Entities.ShipmentRecord", b =>
                {
                    b.HasOne("Domains.Identity.Entities.User", "Coordinator")
                        .WithMany()
                        .HasForeignKey("CoordinatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domains.GoGo.Entities.Shipment", "Shipment")
                        .WithMany()
                        .HasForeignKey("ShipmentId");
                });

            modelBuilder.Entity("Domains.GoGo.Entities.ShipmentRequest", b =>
                {
                    b.HasOne("Domains.Identity.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domains.GoGo.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId");

                    b.HasOne("Domains.GoGo.Entities.Shipment", "Shipment")
                        .WithMany()
                        .HasForeignKey("ShipmentId");
                });

            modelBuilder.Entity("Domains.GoGo.Entities.Vehicle", b =>
                {
                    b.HasOne("Domains.GoGo.Entities.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domains.GoGo.WareHouse", b =>
                {
                    b.HasOne("Domains.Identity.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Domains.Identity.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Domains.Identity.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Domains.Identity.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Domains.Identity.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domains.Identity.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Domains.Identity.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
